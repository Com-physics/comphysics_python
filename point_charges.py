# Visualization of Electric Field Due to Point Charges
# Importing necessary libraries
import numpy as np  # Importing NumPy for numerical operations
import matplotlib.pyplot as plt  # Importing Matplotlib for plotting

# Function to determine the electric field generated by a charge
def E(q, q_position, x, y):
    q_x, q_y = q_position[0], q_position[1]  # Extracting the charge's position
    d3 = np.hypot(x - q_x, y - q_y) ** 3  # Calculating the cube of the distance from the charge
    return q * (x - q_x) / d3, q * (y - q_y) / d3  # Returning the electric field components (Ex, Ey)

# Grid of x, y points for the electric field visualization
nx, ny = 64, 64  # Number of points in the x and y directions
x = np.linspace(-4, 4, nx)  # Creating an array of x values from -4 to 4
y = np.linspace(-3, 3, ny)  # Creating an array of y values from -3 to 3
X, Y = np.meshgrid(x, y)  # Creating a meshgrid for the x and y coordinates

# Charge locations
charges = []  # Initializing a list to hold charge information
charges.append((+1, (-1.5, -0.3)))  # Adding a positive charge at the specified position
charges.append((-1, (+1.5, +0.3)))  # Adding a negative charge at the specified position

# Prepare arrays for the electric field components, E = (Ex, Ey)
Ex, Ey = np.zeros((ny, nx)), np.zeros((ny, nx))  # Initializing the electric field arrays to zero

# Calculating the electric field contributions from each charge
for charge in charges:
    ex, ey = E(*charge, x=X, y=Y)  # Calculating the electric field from the current charge
    Ex = Ex + ex  # Summing the x-components of the electric field
    Ey = Ey + ey  # Summing the y-components of the electric field

# Setting up the figure for plotting
fig = plt.figure(figsize=(4, 3))  # Creating a new figure with a specified size

# Plotting the electric field using streamlines
plt.streamplot(x, y, Ex, Ey, color='black', linewidth=1, density=0.25, arrowstyle='-', arrowsize=1.5, broken_streamlines=False)

# Adding filled circles for the charges themselves
charge_colors = {True: '#AAAAAA', False: '#000000'}  # Defining colors for positive and negative charges
for q, pos in charges:
    plt.scatter(pos[0], pos[1], s=200, color=charge_colors[q > 0], zorder=2)  # Plotting the charges

# Setting the limits and aspect ratio for the plot
plt.xlim(-4, 4)  # Setting x-axis limits
plt.ylim(-3, 3)  # Setting y-axis limits
plt.axis('equal')  # Ensuring equal scaling on both axes
plt.axis('off')  # Hiding the axes for a cleaner look

# Displaying the plot
plt.show()  # Rendering the plot to the screen
